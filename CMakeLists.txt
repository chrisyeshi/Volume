cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

# TODO: write unit tests
set(ENABLE_TESTS ON CACHE BOOL "Enable test")
set(ENABLE_HDF5 ON CACHE BOOL "Enable HDF5 modules")
set(ENABLE_CUDA ON CACHE BOOL "Enable CUDA modules")

if(${ENABLE_TESTS})
    enable_testing()
    add_subdirectory(tests)
endif(${ENABLE_TESTS})
if(${ENABLE_CUDA})
	find_package(CUDA REQUIRED)
endif(${ENABLE_CUDA})
if(${ENABLE_HDF5})
    add_definitions(-DENABLE_HDF5)
    find_package(HDF5 NAMES hdf5 REQUIRED)
endif(${ENABLE_HDF5})
find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
include_directories(${HDF5_INCLUDE_DIR})

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

file(GLOB SOURCES *.cpp)
file(GLOB HEADERS *.h)
file(GLOB UI_FILES *.ui)
if(NOT ${ENABLE_CUDA})
	file(GLOB SOURCES_CUDA *cuda.cpp)
    file(GLOB HEADERS_CUDA *cuda.h)
#	list(REMOVE_ITEM SOURCES ${SOURCES_CUDA})
	list(REMOVE_ITEM HEADERS ${HEADERS_CUDA})
endif(NOT ${ENABLE_CUDA})
if(NOT ${ENABLE_HDF5})
    file(GLOB SOURCES_HDF5 *hdf5*.cpp)
    file(GLOB HEADERS_HDF5 *hdf5*.h)
    file(GLOB UIFILES_HDF5 *hdf5*.ui)
    list(REMOVE_ITEM SOURCES ${SOURCES_HDF5})
    list(REMOVE_ITEM HEADERS ${HEADERS_HDF5})
    list(REMOVE_ITEM UI_FILES ${UIFILES_HDF5})
endif(NOT ${ENABLE_HDF5})

qt5_wrap_ui(UI_HEADERS ${UI_FILES})

if(${ENABLE_CUDA})
    cuda_add_library(volume ${SOURCES} ${HEADERS} ${UI_HEADERS})
else(${ENABLE_CUDA})
    add_library(volume ${SOURCES} ${HEADERS} ${UI_HEADERS})
endif(${ENABLE_CUDA})
target_compile_features(volume PUBLIC cxx_nullptr)
target_include_directories(volume PUBLIC ${CUDA_INCLUDE_DIRS})
target_link_libraries(volume ${HDF5_LIBRARIES})
qt5_use_modules(volume Core Widgets)
